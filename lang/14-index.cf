import vyos
import ip
gw_last_octet = 1

typedef segm_t as string matching self == "vxlan" or self == "vlan" or self == "none"
typedef segm_id as number matching self > 0 and self < 4096
typedef cidr as string matching /^([0-9]{1,3})(\.[0-9]{1,3}){3}.[0-9]{1,2}$/
typedef v6_net as string matching /^(?:[a-f0-9]{1,4}:){1,4}:\/[0-9]{1,3}$/

entity Network:
    string network_name
    segm_id segmentation_id
    segm_t segmentation_type
    string[] tags=[]
end

index Network(segmentation_type, segmentation_id)

implement Network using std::none

entity Subnet:
    string subnet_name
    ip::cidr_v10 gateway_address
end

entity V4Subnet extends Subnet:
    cidr network_address
end

implementation v4GW for V4Subnet:
    my_ip = ip::ipindex(self.network_address, gw_last_octet)
    prefixlen = ip::ipnet(self.network_address, "prefixlen")
    self.gateway_address= "{{my_ip}}/{{prefixlen}}"
end

entity V6Subnet extends Subnet:
    ip::cidr_v6 network_address
end

implementation v6GW for V6Subnet:
    net_add = ip::ipnet(self.network_address, "network")
    prefixlen = ip::ipnet(self.network_address, "prefixlen")
    self.gateway_address = "{{ net_add }}{{gw_last_octet}}/{{prefixlen}}"
end

implement V4Subnet using v4GW
implement V6Subnet using v6GW

Subnet.network [1] -- Network.subnets [0:]

entity Router:
    string router_name
    string os
    string mgmt_ip
end

implementation cumulus for Router:
    std::print(std::template("/cumulus.j2"))
end

implement Router using cumulus when os == "cumulus"

implementation vyos for Router:
    host = vyos::Host(
        name=router_name,
        user="vyos",
        password="vyos",
        ip=mgmt_ip)
    for interface in self.interfaces:
        vinterface = vyos::Interface(
            name=interface.name,
            host=host
        )
        for net in interface.networks:
            if net.segmentation_type == "none":
              for sub in net.subnets:
                prefixlen = ip::ipnet(sub.network, "prefixlen")
                vinterface.addresses = vyos::Address(ip=sub.gateway_address)
              end
            else:
                vif = vyos::Vif(parent=vinterface, vlan=net.segmentation_id, host=host)
                for sub in net.subnets:
                    vif.addresses = vyos::Address(ip=sub.gateway_address)
                end
            end
        end
    end
end

implement Router using vyos when os == "vyos"

entity Interface:
    string name
end

implement Interface using std::none

Interface.networks [0:] -- Network
Router.interfaces [0:] -- Interface.gateway [0:1]

net1 = Network(network_name="net1", segmentation_id=10, segmentation_type="vlan", tags=["vlan"])
sub1 = V4Subnet(subnet_name="sub1", network_address="192.0.2.0/24", network=net1)
sub2 = V4Subnet(subnet_name="sub2", network_address="198.51.100.0/24", network=net1)
sub3 = V6Subnet(subnet_name="x", network_address="2a02:1810:bc04:5200::/64", network=net1)

for s in net1.subnets:
    std::print("Subnet {{s.subnet_name}} has address {{s.network_address}} on network {{ s.network.network_name }}")
    std::print("Gatway for {{s.subnet_name}} is {{ s.gateway_address }}")
end

r1 = Router(router_name="lab1", os="vyos", mgmt_ip="10.0.0.5")
r1.interfaces = Interface(name="eth2", networks=[net1])

required_net = Network[segmentation_type="vlan", segmentation_id=10]
